import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

import static de.fayard.refreshVersions.core.Versions.versionFor

buildscript {
    ext {
        buildConfig = [
            'compileSdk': 34,
            'minSdk'    : 24,
            'targetSdk' : 34,
        ]
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath libs.android.gradlePlugin
        classpath libs.kotlin.gradlePlugin
        classpath libs.kotlinx.kover.gradlePlugin
        classpath libs.google.secrets.gradlePlugin
        classpath libs.google.hilt.gradlePlugin
        classpath libs.apollo.gradlePlugin
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

subprojects {
    apply from: rootProject.file('ktlint.gradle')
    apply from: rootProject.file('kover.gradle')

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    tasks.withType(KotlinCompile).configureEach {
        kotlinOptions {
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-opt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-opt-in=kotlin.time.ExperimentalTime"

            jvmTarget = JavaVersion.VERSION_11
        }
    }

    configurations.configureEach {
        exclude group: 'androidx.appcompat'
        exclude group: 'com.google.android.material', module: 'material'

        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            def group = details.requested.group
            def module = details.requested.module.name

            if (group == 'org.jetbrains.kotlin' && module.startsWith('kotlin-stdlib')) {
                details.useVersion versionFor(project, "version.kotlin")
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task kover(group: 'verification', dependsOn: ['app:testDebugUnitTest', 'koverCollectReports'])
